import ALUOP . _
trait Config {
// word length configuration parameter
val WLEN = 32
// ALU operation control signal width
val ALUOP_SIG_LEN = 4
}
class ALUIO extends Bundle with Config {
val inA = Input ( UInt ( WLEN . W ) )
val inB = Input ( UInt ( WLEN . W ) )
val alu_Op = Input ( UInt ( ALUOP_SIG_LEN . W ) )
val out = Output ( UInt ( WLEN . W ) )
val sum = Output ( UInt ( WLEN . W ) )
}
class ALU extends Module with Config {
val io = IO ( new ALUIO )
val sum = io . in_A + Mux ( io . alu_Op (0) , - io . in_B , io . in_B )
val cmp = Mux ( io . in_A ( XLEN -1) === io . in_B ( XLEN -1) , sum ( XLEN -1) ,
Mux ( io . alu_Op (1) , io . in_B ( XLEN -1) , io . in_A ( XLEN -1) ) )
val shamt = io . in_B (4 ,0) . asUInt
val shin = Mux ( io . alu_Op (3) , io . in_A , Reverse ( io . in_A ) )
val shiftr = ( Cat ( io . alu_Op (0) && shin ( XLEN -1) , shin ) . asSInt > > shamt ) (
XLEN -1 , 0)
val shiftl = Reverse ( shiftr )
val io.out := 0.U

switch (io.alu_Op){
    is(io.alu_Op==="b0000".U){
        io.out:=sum
    }  
    is(io.alu_Op==="b0001".U){
        io.out:=sum
    }  
    is(io.alu_Op==="b0011".U){
        io.out:=cmp
    }
    is(io.alu_Op==="b0011".U){
        io.out:=shifter
    }
       is(io.alu_Op==="b0100".U){
        io.out:=shift1
    }
       is(io.alu_Op==="b0101".U){
        io.out:= io . in_A & io . in_B
    }
       is(io.alu_Op==="b0110".U){
        io.out:=io . in_A | io . in_B
    }
       is(io.alu_Op==="b0111".U){
        io.out:=io . in_A ^ io . in_B
    }
       is(io.alu_Op==="b1000".U){
        io.out:= io . in_A 
    }
       is(io.alu_Op==="b1001".U){
        io.out:= io . in_B 
    }
}
io . out := out
io . sum := sum
}